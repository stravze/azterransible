# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

variables:
  keyvaultName: 'rdo-runbook'
  serviceConnection: 'sp-conn'
  terraformstoragerg: 'rdo-perftest-poc'
  terraformstorageaccount: 'rdoperftesttf'

jobs:
- job: ReadKeyVault
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - template: ../steps/keyvault-read.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      keyvaultName: $(keyvaultName)

# - job: PrepareArtifacts
#   steps:
#   - task: CopyFiles@2
#     displayName: 'Copy Terraform files to artifacts'
#     inputs:
#       SourceFolder: terraform
#       TargetFolder: '$(Build.ArtifactStagingDirectory)/terraform'

#   - task: CopyFiles@2
#     displayName: 'Copy Ansible files to artifacts'
#     inputs:
#       SourceFolder: ansible
#       TargetFolder: '$(Build.ArtifactStagingDirectory)/ansible'

#   - task: CopyFiles@2
#     displayName: 'Copy script files to artifacts'
#     inputs:
#       SourceFolder: scripts
#       TargetFolder: '$(Build.ArtifactStagingDirectory)/scripts'

#   - task: PublishBuildArtifacts@1
#     inputs:
#       pathtoPublish: '$(Build.ArtifactStagingDirectory)'
#       artifactName: drop

#   - task: DownloadBuildArtifacts@0
#     inputs:
#       buildType: 'current'
#       downloadType: 'single'
#       artifactName: 'drop'
#       downloadPath: '$(System.ArtifactsDirectory)'

- job: PrepareStorageAccount

  steps:
  - script: echo "##vso[task.setvariable variable=terraformstoragerg;isOutput=true]$(terraformstoragerg)"
    name: setResourceGroup

  - task: AzureCLI@1
    displayName: CreateContainer
    inputs:
      azureSubscription: $(serviceConnection)
      arguments: $(terraformstoragerg)
      scriptLocation: 'scriptPath' 
      scriptPath: scripts/createContainer.sh

  # - task: AzureCLI@1
  #   displayName: GetContainerKey
  #   inputs:
  #     azureSubscription: $(serviceConnection)
  #     arguments: '$(terraformstoragerg) $(terraformstorageaccount)'
  #     scriptLocation: 'scriptPath' 
  #     scriptPath: scripts/getKey.sh

# - job: InstallSSHkey 
#   pool:
#       vmImage: 'Ubuntu-16.04'
#   dependsOn: ReadKeyVault
#   variables:
#     SSH_PUB_KEY: $[dependencies.ReadKeyVault.outputs['exportKeyVault.SSH_PUB_KEY']]
#   steps:
#   - task: DownloadSecureFile@1
#     inputs:
#       secureFile: 'azure'

#   - task: InstallSSHkey@0
#     inputs:
#       hostName: 'default'
#       sshPublicKey: $(SSH_PUB_KEY)
#       sshKeySecureFile: 'azure'

- job: Terraform
  dependsOn: PrepareStorageAccount
  pool:
    vmImage: 'ubuntu-16.04'
  variables:
    terraformstoragerg: $[dependencies.PrepareStorageAccount.outputs['setResourceGroup.terraformstoragerg']]
    terraformstorageaccount: $[dependencies.PrepareStorageAccount.outputs['CreateContainer.terraformstorageaccount']]
    storagekey: $[dependencies.PrepareStorageAccount.outputs['CreateContainer.storagekey']]

  steps:
  - script: echo $(terraformstoragerg) $(terraformstorageaccount) $(storagekey)
  - task: AzureCLI@1
    displayName: InitialiseTerraform
    inputs:
      azureSubscription: $(serviceConnection)
      arguments: '$(terraformstorageaccount) $(storagekey)'
      scriptLocation: 'scriptPath'
      scriptPath: scripts/init.sh


#   - task: ShellScript@2
#     displayName: 'Apply Terraform'
#     inputs:
#       scriptPath: scripts/apply.sh
