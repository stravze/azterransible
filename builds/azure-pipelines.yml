# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

variables:
  keyvaultName: 'rdo-runbook'
  serviceConnection: 'sp-conn'
  terraformstoragerg: 'rdo-perftest-poc'
  terraformstorageaccount: 'terraformstorage0ec0e102'


jobs:
- job: ReadKeyVault
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - template: ../steps/keyvault-read.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      keyvaultName: $(keyvaultName)

- job: PrepareArtifacts
  steps:
  - task: CopyFiles@2
    displayName: 'Copy Terraform files to artifacts'
    inputs:
      SourceFolder: terraform
      TargetFolder: '$(build.artifactstagingdirectory)/terraform'

  - task: CopyFiles@2
    displayName: 'Copy Ansible files to artifacts'
    inputs:
      SourceFolder: ansible
      TargetFolder: '$(build.artifactstagingdirectory)/ansible'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'

- job: PrepareStorageAccountDEPLOY
  steps:
  - task: AzureCLI@1
    displayName: CreateStorageContainer
    inputs:
      azureSubscription: $[dependencies.ReadKeyVault.outputs['exportKeyVault.ARM_SUBSCRIPTION_ID']]'
      scriptLocation: 'inlineScript'
      inlineScript: 'call az storage container create --name terraform --account-name $(terraformstorageaccount)'

  - task: AzurePowerShell@3
    displayName: GetStorageKey
    inputs:
      azureSubscription: $[dependencies.ReadKeyVault.outputs['exportKeyVault.ARM_SUBSCRIPTION_ID']]'
      scriptType: 'FilePath'
      scriptPath: ../scripts/getKey.ps1
      errorActionPreference: 'stop'
      azurePowerShellVersion: 'latestVersion'

# - job: InstallSSHkey 
#   pool:
#       vmImage: 'Ubuntu-16.04'
#   steps:
#   - task: DownloadSecureFile@1
#     inputs:
#       secureFile: 'github'

#   - task: InstallSSHkey@0
#     inputs:
#       hostName: 'default'
#       sshPublicKey: '$(SSH_PUB_KEY)'
#       sshKeySecureFile: 'github'