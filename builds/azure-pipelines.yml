# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

variables:
  keyvaultName: 'rdo-runbook'
  serviceConnection: 'sp-conn'
  terraformstoragerg: 'rdo-perftest-poc'
  terraformstorageaccount: 'rdoperftesttf'

jobs:
- job: ReadKeyVault
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - template: ../steps/keyvault-read.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      keyvaultName: $(keyvaultName)

# - job: PrepareArtifacts
#   steps:
#   - task: CopyFiles@2
#     displayName: 'Copy Terraform files to artifacts'
#     inputs:
#       SourceFolder: terraform
#       TargetFolder: '$(Build.ArtifactStagingDirectory)/terraform'

#   - task: CopyFiles@2
#     displayName: 'Copy Ansible files to artifacts'
#     inputs:
#       SourceFolder: ansible
#       TargetFolder: '$(Build.ArtifactStagingDirectory)/ansible'

#   - task: CopyFiles@2
#     displayName: 'Copy script files to artifacts'
#     inputs:
#       SourceFolder: scripts
#       TargetFolder: '$(Build.ArtifactStagingDirectory)/scripts'

#   - task: PublishBuildArtifacts@1
#     inputs:
#       pathtoPublish: '$(Build.ArtifactStagingDirectory)'
#       artifactName: drop

#   - task: DownloadBuildArtifacts@0
#     inputs:
#       buildType: 'current'
#       downloadType: 'single'
#       artifactName: 'drop'
#       downloadPath: '$(System.ArtifactsDirectory)'

  # - task: AzureCLI@1
  #   displayName: CreateStorageContainer
  #   inputs:
  #     azureSubscription: $(serviceConnection)
  #     scriptLocation: 'InlineScript' 
  #     InlineScript: 'az storage container create --name terraform --account-name $(terraformstorageaccount)'

  # - task: AzureCLI@1
  #   displayName: CreateStorageContainer
  #   inputs:
  #     azureSubscription: $(serviceConnection)
  #     scriptLocation: 'ScriptPath' 
  #     scriptPath: ../scripts/getKey.sh

- job: InstallSSHkey 
  pool:
      vmImage: 'Ubuntu-16.04'
  variables:
    SSH_PUB_KEY: $[dependencies.ReadKeyVault.outputs['exportKeyVault.SSH_PUB_KEY']]
  steps:
  - task: DownloadSecureFile@1
    inputs:
      secureFile: 'azure'

  - task: InstallSSHkey@0
    inputs:
      hostName: 'default'
      sshPublicKey: $(SSH_PUB_KEY)
      sshKeySecureFile: 'azure'