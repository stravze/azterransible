# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

variables:
  keyvaultName: 'rdo-runbook'
  serviceConnection: 'sp-conn'
  terraformstoragerg: 'rdo-perftest-poc'
  terraformstorageaccount: 'rdoperftesttf'
  securefileName: 'azure'

jobs:
- job: ReadKeyVault
  pool:
    vmImage: 'Ubuntu-16.04'
  steps:
  - template: ../steps/keyvault-read.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      keyvaultName: $(keyvaultName)

# - job: PrepareStorageAccount
#   pool:
#     vmImage: 'Ubuntu 16.04'
#   steps:
#   - template: ../steps/createStorage.yaml
#     parameters:
#       serviceConnection: $(serviceConnection)
#       terraformstoragerg: $(terraformstoragerg)
#       terraformstorageaccount: $(terraformstorageaccount)


- job: PrepareStorage
  pool:
    vmImage: 'Ubuntu-16.04'
  dependsOn: ReadKeyVault
  variables:
    tenantId: $[dependencies.ReadKeyVault.outputs['exportKeyVault.ARM_TENANT_ID']]
    clientId: $[dependencies.ReadKeyVault.outputs['exportKeyVault.ARM_CLIENT_ID']]
    clientSecret: $[dependencies.ReadKeyVault.outputs['exportKeyVault.ARM_CLIENT_SECRET']]
    subscriptionId: $[dependencies.ReadKeyVault.outputs['exportKeyVault.ARM_SUBSCRIPTION_ID']]
  steps:
  - template: ../steps/getStorageKey.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      terraformstoragerg: $(terraformstoragerg)
      terraformstorageaccount: $(terraformstorageaccount)
      variables:
        tenantId: $(tenantId)
        clientId: $(clientId)
        clientSecret: $(clientSecret)
        subscriptionId: $(subscriptionId)

- job: InstallSSHkey
  pool:
    vmImage: 'Ubuntu-16.04'
  dependsOn: ReadKeyVault
  variables:
    sshPubKey: $[dependencies.ReadKeyVault.outputs['exportKeyVault.SSH_PUB_KEY']]
  steps:
  - template: ../steps/installSSHkey.yaml
    parameters:
      securefileName: $(securefileName)
      variables:
        sshPubKey: $(sshPubKey)

- job: Terraform
  dependsOn:
  - ReadKeyVault
  - PrepareStorage
  - InstallSSHkey
  pool:
    vmImage: 'Ubuntu-16.04'
  variables:
    storagekey: $[dependencies.PrepareStorage.outputs['getStorageKey.storagekey']]
    sshPubKey: $[dependencies.ReadKeyVault.outputs['exportKeyVault.SSH_KEY_PUB']]
    sshPrivKey: $[dependencies.ReadKeyVault.outputs['exportKeyVault.SSH_KEY_PRIV']]
    tenantId: $[dependencies.ReadKeyVault.outputs['exportKeyVault.ARM_TENANT_ID']]
    clientId: $[dependencies.ReadKeyVault.outputs['exportKeyVault.ARM_CLIENT_ID']]
    clientSecret: $[dependencies.ReadKeyVault.outputs['exportKeyVault.ARM_CLIENT_SECRET']]
    subscriptionId: $[dependencies.ReadKeyVault.outputs['exportKeyVault.ARM_SUBSCRIPTION_ID']]
  steps:
  - task: AzureCLI@1
    displayName: TerraformInit
    inputs:
      azureSubscription: $(serviceConnection)
      arguments: $(clientId) $(clientSecret) $(subscriptionId) $(tenantId) $(storagekey)
      scriptLocation: 'scriptPath'
      scriptPath: scripts/init.sh

  # - task: AzureCLI@1
  #   displayName: TerraformPlan
  #   inputs:
  #     azureSubscription: $(serviceConnection)
  #     arguments: $(clientId) $(clientSecret) $(subscriptionId) $(tenantId) $(storagekey) "$(sshPubKey)"
  #     scriptLocation: 'scriptPath'
  #     scriptPath: scripts/plan.sh

  - task: DownloadSecureFile@1
    inputs:
      secureFile: $(securefileName)
  
  - task: AzureCLI@1
    displayName: TerraformApply
    inputs:
      azureSubscription: $(serviceConnection)
      arguments: $(clientId) $(clientSecret) $(subscriptionId) $(tenantId) $(storagekey) "$(sshPubKey)" "$(sshPrivKey)"
      scriptLocation: 'scriptPath'
      scriptPath: scripts/apply.sh

  # - task: AzureCLI@1
  #   displayName: TerraformApply
  #   inputs:
  #     azureSubscription: $(serviceConnection)
  #     arguments:
  #     scriptLocation: 'scriptPath'
  #     scriptPath: scripts/apply.sh
