# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

variables:
  keyvaultName: 'rdo-runbook'
  serviceConnection: 'sp-conn'
  terraformstoragerg: 'rdo-perftest-poc'
  terraformstorageaccount: 'rdoperftesttf'
  securefileName: 'github'

jobs:
- job: ReadKeyVault
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - template: ../steps/keyvault-read.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      keyvaultName: $(keyvaultName)

# - job: PrepareStorageAccount
#   pool:
#     vmImage: 'Ubuntu 16.04'
#   steps:
#   - template: ../steps/createStorage.yaml
#     parameters:
#       serviceConnection: $(serviceConnection)
#       terraformstoragerg: $(terraformstoragerg)
#       terraformstorageaccount: $(terraformstorageaccount)


- job: PrepareStorageAccount2
  pool:
    vmImage: 'Ubuntu 16.04'
  dependsOn: ReadKeyVault
  variables:
    tenantId: $[dependencies.ReadKeyVault.outputs['exportKeyVault.ARM_TENANT_ID']]
    clientId: $[dependencies.ReadKeyVault.outputs['exportKeyVault.ARM_CLIENT_ID']]
    clientSecret: $[dependencies.ReadKeyVault.outputs['exportKeyVault.ARM_CLIENT_SECRET']]
  steps:
  - template: ../steps/getStorageKey.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      terraformstoragerg: $(terraformstoragerg)
      terraformstorageaccount: $(terraformstorageaccount)
      variables:
        tenantId: $(tenantId)
        clientId: $(clientId)
        clientSecret: $(clientSecret)

# - job: InstallSSHkey 
#   pool:
#     vmImage: 'Ubuntu-16.04'
#   dependsOn: ReadKeyVault
#   variables:
#     sshPubKey: $[dependencies.ReadKeyVault.outputs['exportKeyVault.SSH_PUB_KEY']]
#   steps:
#   - template: ../steps/installSSHkey.yaml
#     parameters:
#       securefileName: $(securefileName)
#       variables:
#         sshPubKey: $(sshPubKey)

# - job: Terraform
#   dependsOn: PrepareStorageAccount
#   pool:
#     vmImage: 'Ubuntu-16.04'
#   variables:
#     storagekey: $[dependencies.PrepareStorageAccount.outputs['prepareContainer.storagekey']]
#   steps:
#   - script: |
#       echo $storagekey $(storagekey)
#   - task: AzureCLI@1
#     displayName: InitialiseTerraform
#     inputs:
#       azureSubscription: $(serviceConnection)
#       arguments: '$(terraformstorageaccount) $(storagekey)'
#       scriptLocation: 'scriptPath'
#       scriptPath: scripts/init.sh


#   - task: ShellScript@2
#     displayName: 'Apply Terraform'
#     inputs:
#       scriptPath: scripts/apply.sh
